let canvas = document.getElementById("levelPreview");
let ctx = canvas.getContext("2d");

class MenuElement {
    constructor(left, top, width, height, callback, image) {
        this.left = left;
        this.top = top;
        this.width = width;
        this.height = height;
        this.fcn = callback;
        this.image = image;
    }
}

class BoardTilePosition {
    constructor(left, top, width, height, character) {
        this.left = left;
        this.top = top;
        this.width = width;
        this.height = height;
        this.character = character;
    }
}

let currentSize = 32;

zoomInFcn = () => currentSize<=128 && (currentSize *= 2);
zoomOutFcn = () => currentSize>=8 && (currentSize /= 2);

let playerX;
let playerY;

let centerX;
let centerY;

let focusMode = details || playSokoban ? 0 : 1;

let cameraPositionOffsetX = 0;
let cameraPositionOffsetY = 0;

let undoAvailable = false;
let redoAvailable = false;

focusPlayerFcn = () => focusMode = 0;
focusCenterFcn = () => focusMode = 1;

cameraRightFcn = () => cameraPositionOffsetX++;
cameraLeftFcn = () => cameraPositionOffsetX--;
cameraDownFcn = () => cameraPositionOffsetY++;
cameraUpFcn = () => cameraPositionOffsetY--;

let currentSolvingSpeed = 15;

speedUpFcn = () => currentSolvingSpeed<30 && currentSolvingSpeed++;
slowDownFcn = () => currentSolvingSpeed>0 && currentSolvingSpeed--;

undoFcn = () => {
    currentStepsString = currentStepsString.slice(0, -1);
    redoAvailable = true;
    if (!currentStepsString) undoAvailable = false;
    undos++;
    recalculateStatsJs();
}

redoFcn = () => {
    if (currentStepsString.length!=stepsString.length) {
        currentStepsString += stepsString.charAt(currentStepsString.length);
        undoAvailable = true;
        if (currentStepsString.length==stepsString.length) redoAvailable = false;
        redos++;
        recalculateStatsJs();
    }
}

let solutionRunning = false;

solveClickFcn = () => solutionRunning ? haltSolveFcn() : solveFcn();

let currentTimeout;

let allBoardStates = [];

<% include updateCurrentStep %>

//Make sure the window won't scroll with arrow keys
window.addEventListener("keydown", (e) => {
    if([32, 37, 38, 39, 40].indexOf(e.keyCode) > -1) {
        e.preventDefault();
    }
}, false);

solveFcn = () => {
    if (document.getElementById("currentStep").value!=document.getElementById("currentStep").max) {
        solutionRunning = true;
        currentTimeout = setTimeout(solveFcn, (30-currentSolvingSpeed)*30);
    }
    else {
        solutionRunning = false;
        return;
    }
    updateCurrentStep(++document.getElementById("currentStep").value)
}

haltSolveFcn = () => {
    solutionRunning = false;
    clearTimeout(currentTimeout);
}

<% include mouseEvents %>
<% include loadingImages %>
<% include menu %>

let tilesOnGroundPositions = [];
drawCanvas = () => {
    tilesOnGroundPositions = [];
    let playerOnGround = level.board.indexOf("@")!=-1;
    let player = playerOnGround ? level.board.indexOf("@") : level.board.indexOf("+");
    
    playerX = Math.floor(player/level.width);
    playerY = player%level.width;

    switch(focusMode) { 
        case 0:
            centerX = playerX;
            centerY = playerY;
            break;
        case 1:
            centerX = Math.round(level.height/2)-cameraPositionOffsetY;
            centerY = Math.round(level.width/2)-cameraPositionOffsetX;
            break;
    }

    //Drawing player
    if (playerOnGround) {
        //console.log(playerIcon);
        ctx.drawImage(playerIcon, canvas.width/2-currentSize/2-(centerY-playerY)*currentSize, canvas.height/2-currentSize/2-(centerX-playerX)*currentSize, currentSize, currentSize);
    } else {
        ctx.drawImage(playerGoal, canvas.width/2-currentSize/2-(centerY-playerY)*currentSize, canvas.height/2-currentSize/2-(centerX-playerX)*currentSize, currentSize, currentSize);
    }

    ctx.strokeStyle = "black";
    level.board.forEach((symbol, index) => {
        //console.log(symbol, index);
        tilesOnGroundPositions.push(new BoardTilePosition(canvas.width/2-currentSize/2-centerY*currentSize+index%level.width*currentSize, canvas.height/2-currentSize/2-centerX*currentSize+Math.floor(index/level.width)*currentSize, currentSize, currentSize, symbol));
        switch(symbol) {
            case "#": {
                //wall
                ctx.drawImage(wall, canvas.width/2-currentSize/2-centerY*currentSize+index%level.width*currentSize, canvas.height/2-currentSize/2-centerX*currentSize+Math.floor(index/level.width)*currentSize, currentSize, currentSize);
                break;
            }
            case "*": {
                //box on a goal
                ctx.drawImage(boxGoal, canvas.width/2-currentSize/2-centerY*currentSize+index%level.width*currentSize, canvas.height/2-currentSize/2-centerX*currentSize+Math.floor(index/level.width)*currentSize, currentSize, currentSize);
                break;
            }
            case ".": {
                //goal
                ctx.drawImage(goal, canvas.width/2-currentSize/2-centerY*currentSize+index%level.width*currentSize, canvas.height/2-currentSize/2-centerX*currentSize+Math.floor(index/level.width)*currentSize, currentSize, currentSize);
                break;
            }
            case "$": {
                //box
                ctx.drawImage(box, canvas.width/2-currentSize/2-centerY*currentSize+index%level.width*currentSize, canvas.height/2-currentSize/2-centerX*currentSize+Math.floor(index/level.width)*currentSize, currentSize, currentSize);
                break;
            }
            case " ":
            case "_": 
            case "-": {
                //floor
                ctx.drawImage(floor, canvas.width/2-currentSize/2-centerY*currentSize+index%level.width*currentSize, canvas.height/2-currentSize/2-centerX*currentSize+Math.floor(index/level.width)*currentSize, currentSize, currentSize);
                break;
            }
        }
    })

    
    //Drawing menu
    ctx.font = "20px Alata";
    ctx.fillText("Zoom: ", 10, 30);
    if (details || playSokoban) {
        ctx.fillText("Focus: ", 10, canvas.height-50);
    } 
    if (details) {
        ctx.fillText("Running speed: ", canvas.width-150, 30);
        ctx.fillText(
            (solution.solution[document.getElementById("currentStep").value-1] 
            ? (solution.solution[document.getElementById("currentStep").value-1] + " ") 
            : "") 
        + (solution.solution[document.getElementById("currentStep").value] 
            ? solution.solution[document.getElementById("currentStep").value] 
            : "")
        , canvas.width/2-10, 30);
        ctx.fillText(("0" + currentSolvingSpeed).slice(-2), canvas.width-120, 30+35);
    } else if (playSokoban) {
        ctx.fillText("Undo/redo moves: ", canvas.width-180, 30);
    }
    if(focusMode) ctx.fillText("Move camera: ", canvas.width-140, canvas.height-50-40);
    drawMenuButtons();
}